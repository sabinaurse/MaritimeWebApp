// <auto-generated />
using System;
using MaritimeWebApp.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaritimeWebApp.Server.Migrations
{
    [DbContext(typeof(MaritimeDbContext))]
    [Migration("20250507110023_SeedFullData")]
    partial class SeedFullData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("MaritimeWebApp.Server.Models.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Romania",
                            Name = "Constanta"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Netherlands",
                            Name = "Rotterdam"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Germany",
                            Name = "Hamburg"
                        });
                });

            modelBuilder.Entity("MaritimeWebApp.Server.Models.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("MaxSpeed")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxSpeed = 24f,
                            Name = "Titanic"
                        },
                        new
                        {
                            Id = 2,
                            MaxSpeed = 30f,
                            Name = "Aurora"
                        });
                });

            modelBuilder.Entity("MaritimeWebApp.Server.Models.VisitedCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("VoyageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VoyageId");

                    b.ToTable("VisitedCountries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "Bulgaria",
                            VisitDate = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VoyageId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "Germany",
                            VisitDate = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VoyageId = 2
                        });
                });

            modelBuilder.Entity("MaritimeWebApp.Server.Models.Voyage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArrivalPortId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeparturePortId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("VoyageDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalPortId");

                    b.HasIndex("DeparturePortId");

                    b.HasIndex("ShipId");

                    b.ToTable("Voyages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalPortId = 2,
                            DeparturePortId = 1,
                            EndDate = new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShipId = 1,
                            StartDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VoyageDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ArrivalPortId = 3,
                            DeparturePortId = 2,
                            EndDate = new DateTime(2023, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShipId = 2,
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VoyageDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MaritimeWebApp.Server.Models.VisitedCountry", b =>
                {
                    b.HasOne("MaritimeWebApp.Server.Models.Voyage", "Voyage")
                        .WithMany("VisitedCountries")
                        .HasForeignKey("VoyageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("MaritimeWebApp.Server.Models.Voyage", b =>
                {
                    b.HasOne("MaritimeWebApp.Server.Models.Port", "ArrivalPort")
                        .WithMany()
                        .HasForeignKey("ArrivalPortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaritimeWebApp.Server.Models.Port", "DeparturePort")
                        .WithMany()
                        .HasForeignKey("DeparturePortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaritimeWebApp.Server.Models.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArrivalPort");

                    b.Navigation("DeparturePort");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("MaritimeWebApp.Server.Models.Voyage", b =>
                {
                    b.Navigation("VisitedCountries");
                });
#pragma warning restore 612, 618
        }
    }
}
